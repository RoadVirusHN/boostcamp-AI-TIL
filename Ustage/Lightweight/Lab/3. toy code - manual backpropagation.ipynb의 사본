{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"3. toy code - manual backpropagation.ipynb의 사본","provenance":[{"file_id":"1gPEtW_tF8kCJKTdNxDOMbfIcEvbm6Rr_","timestamp":1615827359871}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"v8vIMbQQkSY2"},"source":["import numpy as np\n","import math\n","import matplotlib.pyplot as plt"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ea3GXgqXxI0B"},"source":["# 두 개의 레이어를 가진 모델\n","\n","## Architecture\n","\n","### Feedforward\n","\n","$$\n","\\hat{y}  = \\sigma (W_2 \\sigma (W_1  x ) )\n","$$\n","\n","\n","$$\n","\\mathbf{loss}( y, \\hat{y} )  = \\rVert y - \\hat{y} \\rVert_2^2\n","$$\n","\n","### Backpropagation\n","\n","\n","- $x$: input\n","- $z_1 = W_1  x$: 첫 번째 layer에서의 output (활성화 함수 통과 전)\n","- $z_2 = W_2 \\sigma (W_1  x ) $: 두 번째 layer에서의 output (활성화 함수 통과 전)\n","\n","\\\\\n","$$\n","\\frac{d \\mathbf{loss}}{d W_2} =  \\frac{d \\mathbf{loss}}{d \\hat{y}} \n","\\cdot \\frac{d \\hat{y}}{d z_2} \\cdot \\frac{d z_2}{d W_2}\n","$$\n","\n","$$\n","\\frac{d \\mathbf{loss}}{d W_1} =  \\frac{d \\mathbf{loss}}{d \\hat{y}} \n","\\cdot \\frac{d \\hat{y}}{d z_2} \\cdot \\frac{d z_2}{d z_1} \\cdot\n","\\frac{d z_1}{d W_1}\n","$$\n","\n","\n","$$\n","\\frac{d \\mathbf{loss}}{d \\hat{y}} = 2 \\cdot (y - \\hat{y})\n","$$\n","\n","$$\n","\\frac{d \\hat{y}}{d z_2} = z_2 \\cdot (1 - z_2)\n","$$\n","\n","$$\n","\\frac{d z_2}{d z_1} = W_2\n","$$\n","\n","$$\n","\\frac{d z_2}{d W_2} = z_1\n","$$\n","\n","$$\n","\\frac{d z_1}{d W_1} = x\n","$$\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"bsTHqfXFkYMd","colab":{"base_uri":"https://localhost:8080/","height":282},"executionInfo":{"status":"ok","timestamp":1613222417891,"user_tz":-540,"elapsed":2078,"user":{"displayName":"류원탁","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj7RZv2qoxUxqi7ugyLnGyYFCiU7yMOVS6Fhu3v1g=s64","userId":"13187082005098263686"}},"outputId":"71008920-9b1e-4ac9-95fb-25b603f82689"},"source":["class NeuralNetwork:\n","    def __init__(self,x,y):\n","        self.input = x\n","        self.weight1 = np.random.rand(self.input.shape[1], 4)\n","        self.weight2 = np.random.rand(4,1)\n","        self.y = y\n","        self.y_hat = np.zeros(self.y.shape)\n","        self.epoch = 0\n","        self.loss_history = []\n","        \n","    def sigmoid(self,x):\n","        return 1/(1 + np.exp(-x))\n","\n","    def sigmoid_derivative(self, x):\n","        return x * (1.0 - x)\n","        \n","    def feedforward(self):\n","        self.z_1 = self.sigmoid(np.dot(self.input, self.weight1))\n","        self.z_2 = np.dot(self.z_1, self.weight2)\n","        self.y_hat = self.sigmoid(self.z_2)\n","\n","    def backpropagation(self):\n","        d_weight2 = np.dot(self.z_1.T, 2 * (self.y_hat - self.y)) * self.sigmoid_derivative(self.y_hat)\n","        d_weight1 = np.dot(self.input.T,  (np.dot(2 * (self.y_hat - self.y) * self.sigmoid_derivative(self.y_hat), self.weight2.T)))\n","        self.weight1 -= d_weight1\n","        self.weight2 -= d_weight2\n","\n","    def save_loss(self):\n","        loss = np.sum((self.y_hat - self.y) ** 2)\n","        self.loss_history.append(loss)\n","\n","X = np.array(\n","    [\n","     [0,0,1],\n","     [0,1,1],\n","     [1,0,1],\n","     [1,1,1]\n","    ]\n",")\n","y = np.array([[0],[1],[1],[0]])\n","nn = NeuralNetwork(X,y)\n","\n","for i in range(3000):\n","    nn.feedforward()\n","    nn.backpropagation()\n","    nn.save_loss()\n","\n","plt.plot(nn.loss_history)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7fcd09dece80>]"]},"metadata":{"tags":[]},"execution_count":5},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"C_NsFL51xZs3"},"source":["# 세 개의 레이어를 가진 모델"]},{"cell_type":"code","metadata":{"id":"y7VbbEtb1oq6","colab":{"base_uri":"https://localhost:8080/","height":282},"executionInfo":{"status":"ok","timestamp":1613222418383,"user_tz":-540,"elapsed":2563,"user":{"displayName":"류원탁","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj7RZv2qoxUxqi7ugyLnGyYFCiU7yMOVS6Fhu3v1g=s64","userId":"13187082005098263686"}},"outputId":"1a94aa6b-3e2f-40da-9ae1-70f94afa0b5b"},"source":["class NeuralNetwork:\n","    def __init__(self,x,y):\n","        self.input = x\n","        self.weight1 = np.random.rand(self.input.shape[1], 4)\n","        self.weight2 = np.random.rand(4, 4)\n","        self.weight3 = np.random.rand(4, 1)\n","\n","        self.y = y\n","        self.y_hat = np.zeros(self.y.shape)\n","        self.epoch = 0\n","        self.loss_history = []\n","        \n","    def sigmoid(self,x):\n","        return 1/(1 + np.exp(-x))\n","\n","    def sigmoid_derivative(self, x):\n","        return x * (1.0 - x)\n","        \n","    def feedforward(self):\n","        self.z_1 = self.sigmoid(np.dot(self.input, self.weight1))\n","        self.z_2 = np.dot(self.z_1, self.weight2)\n","        self.z_3 = np.dot(self.z_2, self.weight3)\n","        self.y_hat = self.sigmoid(self.z_3)\n","\n","    def backpropagation(self):\n","        d_weight3 = np.dot(self.z_2.T, 2 * (self.y_hat - self.y)) * self.sigmoid_derivative(self.y_hat)\n","        d_weight2 = np.dot(self.z_1.T,  (np.dot(2 * (self.y_hat - self.y) * self.sigmoid_derivative(self.y_hat), self.weight3.T)))\n","        d_weight1 = np.dot(self.input.T, np.dot(self.weight2.T,  (np.dot(2 * (self.y_hat - self.y) * self.sigmoid_derivative(self.y_hat), self.weight3.T))))\n","\n","        self.weight1 -= d_weight1\n","        self.weight2 -= d_weight2\n","        self.weight3 -= d_weight3\n","\n","    def save_loss(self):\n","        loss = np.sum((self.y_hat - self.y) ** 2)\n","        self.loss_history.append(loss)\n","\n","X = np.array(\n","    [\n","     [0,0,1],\n","     [0,1,1],\n","     [1,0,1],\n","     [1,1,1]\n","    ]\n",")\n","y = np.array([[0],[1],[1],[0]])\n","nn = NeuralNetwork(X,y)\n","\n","for i in range(3000):\n","    nn.feedforward()\n","    nn.backpropagation()\n","    nn.save_loss()\n","\n","plt.plot(nn.loss_history)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7fcd09d5eb00>]"]},"metadata":{"tags":[]},"execution_count":6},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"Wuw77-mLBbKS"},"source":["## TODO\n","### 1) Learning Rate를 적용한다면?\n","### 2) bias를 추가한다면?\n"]}]}